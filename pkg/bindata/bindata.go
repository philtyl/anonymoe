// Code generated by go-bindata.
// sources:
// conf/VERSION
// conf/app.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confVersion = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x32\xd0\x33\xd4\x33\x06\x04\x00\x00\xff\xff\x0b\x70\x90\xb6\x05\x00\x00\x00")

func confVersionBytes() ([]byte, error) {
	return bindataRead(
		_confVersion,
		"conf/VERSION",
	)
}

func confVersion() (*asset, error) {
	bytes, err := confVersionBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/VERSION", size: 5, mode: os.FileMode(420), modTime: time.Unix(1567172756, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xdf\x6b\xdb\x30\x10\xc7\xdf\xf5\x57\x5c\x18\x81\x04\x42\x9b\xad\xec\xa5\xc3\x0f\xc2\x3e\xc7\x66\xb6\x24\x64\xa5\x50\x4a\x30\xca\x22\x6a\x83\x63\x79\xd6\xb5\xa5\xff\xfd\xb0\x93\x6e\x83\x22\x38\xc4\xf7\xc7\x87\xbb\x2f\xb0\x58\x2c\x40\xe0\x03\x6a\x98\x47\x29\x93\x3c\x7d\x04\x93\xe5\x15\xa4\x79\x81\x93\xcf\x2e\x29\x55\x20\xaf\x10\x4a\xfe\x13\x21\xce\xb8\xd8\x61\x05\x52\xc0\x0e\x05\x6a\x6e\x30\x81\x58\x8a\x34\xdf\x5d\x6a\x3c\x35\xa8\x3f\x94\x5c\x54\x86\x17\xc5\x67\x96\xc6\x14\x35\x18\x09\x1a\x79\x52\x22\xa4\x52\x43\x86\x85\x9a\x93\xec\x07\xf0\x61\x80\xde\x9e\x1d\x50\x63\x09\x42\xe3\xdf\x02\xf8\x1e\xdc\xab\x1b\xdf\x61\xb0\xcf\x0e\xa8\xa5\xce\x31\xae\x54\x2d\x78\x89\x10\x01\xef\x7d\xff\x7e\xf6\x8e\x29\x2d\x93\x7d\x6c\x72\x29\xea\x52\x26\x93\x45\xe3\x8b\x63\xec\x29\xb8\xf1\xd5\x8d\x87\x29\x60\x64\x2c\x0b\x88\xa0\x21\x1a\x58\x22\x4b\x9e\x0b\x88\xa0\xf3\xbf\x6c\xd7\xf8\x40\x2c\x33\x46\xd5\x3c\x49\x34\x44\xb0\xbd\x99\xdf\x45\x53\x52\x1b\x88\xe0\x6e\xbb\xdd\x32\x2d\xa5\xa9\xf7\x7a\xe2\x2c\x57\x1f\xd0\x75\xb8\xbf\xbd\x5d\xae\x2e\xcc\x75\xb8\x5f\xae\xfe\xf6\xd6\x61\x3a\x2d\xb1\x64\x8f\x36\x38\x08\x8e\xa8\xed\x9f\x03\x7b\x3a\x5d\xa5\x03\x33\x8f\x6a\x5a\x38\xfc\xee\x5a\x72\x77\x4c\x71\x93\x41\x04\x76\x3e\xcd\xb6\xdd\xcd\xe9\x38\x21\x4a\xdb\x76\xff\xd5\x27\xe7\xc0\xae\x9b\x7d\xdd\x7e\xfb\xce\x94\xce\x1f\xb8\xc1\x9a\xc7\xb1\xdc\x0b\x53\x4d\x8c\xd3\xb9\xed\x37\xf3\x6c\x03\x8d\x96\xfc\xb8\x19\x7c\xa0\xb3\x0d\xe4\xc6\xcd\x9b\x3b\x5e\x7f\xcd\x3f\x31\xbc\x0c\x83\x1f\x69\x33\x7a\x4f\xec\x4f\x00\x00\x00\xff\xff\x4b\x94\x10\xe2\x32\x02\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 562, mode: os.FileMode(420), modTime: time.Unix(1567049512, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/VERSION": confVersion,
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"VERSION": &bintree{confVersion, map[string]*bintree{}},
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
