// Code generated by go-bindata.
// sources:
// conf/app.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xdf\x6a\xdb\x30\x18\xc5\xef\xf5\x14\xa7\x1e\x85\x06\xca\x1a\xd8\x5d\x83\x2f\x84\xad\x24\xa6\xb1\x25\x64\xb9\x23\x8c\x11\x44\xfc\x65\x36\x38\xb6\xb0\x94\x74\x79\xfb\x61\x87\x6d\x6c\x08\x84\xd0\x39\xe7\xf7\xfd\xf9\x84\x87\x87\x07\x14\xe2\x5d\x68\xcc\x57\x2e\xd3\x6c\xbd\x87\xd9\x66\x25\xd6\xd9\x4e\x4c\x3a\xbb\xbb\xd4\x4e\xf0\x52\x20\xe7\x6f\x02\xc9\x96\x17\x1b\x51\x42\x16\x48\xa4\xd6\xa2\x54\xb2\x48\xb3\x62\x83\xa4\x2a\x8d\xcc\x91\xc8\x62\x9d\x6d\xfe\x27\x64\x6b\xec\x65\x05\xae\x05\x14\x4f\xde\xf8\x66\x4a\x28\x2d\xdf\xb3\x54\xe8\xe7\x7f\x0a\xc8\xaf\x13\x59\xed\x21\xd7\xc8\xcc\xcc\x60\x2b\x70\xe7\xd0\xdb\x33\x21\x34\x36\xc0\x37\xc3\x87\xc7\xd0\x83\xae\x34\xde\xe0\xec\x0f\x42\x68\x43\x47\x8c\x2b\x75\x28\x78\x2e\x10\x83\xf7\x43\x7f\x3b\x0f\xc4\x56\x30\x0d\xdd\xd3\xc3\x09\xa1\x21\xf8\x9b\x0f\x74\xc6\xc5\xd3\x78\x07\x8e\x97\xde\xff\x0d\xe8\xaa\x38\x54\xa5\xd0\x88\x71\xb6\x6d\xd7\x0c\x3e\xb0\x15\x44\x1b\x1a\x1a\x11\xd5\x74\x8d\x9e\x11\xb9\x71\xa8\x23\x0c\x23\xa2\x40\x3e\x44\x73\x28\x97\xe9\x54\xb9\xa6\x2b\x63\xdf\x3c\x8d\x57\x1a\xbf\x33\xa5\xa5\x91\x89\xdc\x21\x46\x13\x82\x63\xa9\xcc\x79\x56\x20\x46\x37\x1c\xed\x1d\xae\xa5\x34\x87\x4a\x4f\x96\xc7\xa7\xdf\xfe\x85\x7f\x7d\x79\x79\x7c\xba\xdb\x17\xfe\xf5\xf1\x69\x6b\x8c\x3a\x28\xa9\xcd\xc2\xb3\xf9\xcd\xd3\x74\x6a\x72\xf9\x79\x3e\xec\x8f\x8e\x18\x5f\x96\xcb\xe5\xb4\xb8\xca\x39\x1a\xd1\xd1\x95\xba\x79\x7a\x3a\xbb\xce\x06\x82\xed\x6b\xf8\x60\x43\x7b\xc4\xa9\xed\x08\xce\x86\x86\xad\x50\xd3\xc9\x5e\xba\x80\xd6\xcf\x8b\x9a\x7e\xf1\xd1\xd0\x48\xb0\xce\x75\xed\xd1\x86\x76\xe8\x27\x95\x7e\xd2\xf1\x12\xa8\x66\xa5\xe1\x26\x4b\x0e\xf3\x08\x8a\x9b\x2d\xe2\x5f\x01\x00\x00\xff\xff\x13\xa2\x49\xc5\x5b\x02\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 603, mode: os.FileMode(420), modTime: time.Unix(1566019473, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
