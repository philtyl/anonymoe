// Code generated by go-bindata.
// sources:
// conf/app.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xdd\x6a\xe3\x30\x10\x85\xef\xf5\x14\xa7\x59\x0a\x2d\x84\x36\xbb\xcb\xde\x34\xf8\x42\xd8\x4a\x62\x5a\x5b\xc6\x96\xbb\x94\x52\x82\x1a\x4f\x63\x83\x7f\x84\xa5\xa4\x9b\xb7\x5f\xe4\x74\x7f\x11\x08\x31\xf3\x9d\x33\x9a\xf3\x09\x17\x17\x17\x48\xc5\xa3\xc8\x31\x5d\x89\x8c\xe2\xd5\x13\xd4\x26\x2e\xb0\x8a\x1f\x84\xef\xb3\x33\x95\x3d\x08\x5e\x08\x24\xfc\x5e\x20\xdc\xf0\x74\x2d\x0a\xc8\x14\xa1\xcc\x73\x51\x64\x32\x8d\xe2\x74\x8d\xb0\x2c\x94\x4c\x10\xca\x74\x15\xaf\xff\x77\x88\x57\x78\x92\x25\x78\x2e\x90\xf1\xf0\x9e\xaf\xbd\x22\xcb\xe5\x63\x1c\x89\x7c\xfe\xcf\x00\xf9\xdd\x3b\x67\x4f\x90\x2b\xc4\x6a\xf2\x60\x4b\x70\x63\xd0\xeb\x8e\xe0\x6a\xed\x60\xeb\xe1\xdd\x62\xe8\x41\x47\x1a\x4f\x30\x7a\x4f\x70\x8d\x6b\x89\xf1\x2c\xdb\xa6\x3c\x11\x08\xc0\xfb\xa1\x3f\x75\x03\xb1\x25\x54\x4d\x67\xf5\xf0\x06\x57\x13\xec\xc9\x3a\xea\x70\xb0\x34\x9e\x0d\xc7\x43\x6f\xff\x08\xf2\x32\xdd\x96\x85\xc8\x11\xa0\xd3\x4d\x5b\x0f\xd6\xb1\x25\x44\xe3\x6a\x1a\x31\xab\xe8\x38\x9b\x63\x66\xc6\xa1\x9a\x61\x18\x31\x73\x64\xdd\x6c\x12\x25\x32\xf2\x93\x2b\x3a\x32\xf6\x6c\x69\x3c\xd2\xf8\xc2\xb2\x5c\x2a\x19\xca\x07\x04\xa8\x9d\x33\x2c\x92\x09\x8f\x53\x04\x68\x87\x9d\x3e\x9b\xe7\x52\xaa\x6d\x99\x7b\xe4\xf2\xea\x17\x7f\x6d\xef\x6e\x6f\x2f\xaf\xce\xf8\xb5\xbd\xbb\xbc\xda\x28\x95\x6d\x33\x99\xab\x6b\xcb\xa6\x37\x8f\x22\xff\xc9\xc5\xcd\x74\xd8\xef\x3e\x02\x7c\x5d\x2c\x16\x3e\xb8\xd2\x18\x1a\xd1\xd2\x91\xda\x69\x7b\xea\x4c\xab\x1d\x41\xf7\x15\xac\xd3\xae\xd9\xe1\xad\x69\x09\x46\xbb\x9a\x2d\x51\xd1\x9b\x3e\xb4\x0e\x8d\x9d\x82\xf2\x55\xbc\xd7\x34\x12\xb4\x31\x6d\xb3\xd3\xae\x19\x7a\xdf\xa5\x1f\xb4\x3b\x38\xaa\x58\xa1\xb8\x8a\xc3\xed\xb4\x42\xc6\xd5\x06\x81\x1f\x1b\x69\xa7\x5f\xb5\x25\x58\x72\xae\xe9\xf7\x96\x3d\x57\x1f\xa5\x17\x76\xc6\xe0\x0b\xb7\xfb\x61\x6f\x6f\xaa\x57\xaf\x49\x74\xd3\xfe\xc5\xfb\xe8\x5f\xd8\xc7\x3a\x9f\x17\x5f\xbe\xb1\x2c\x8f\x1f\xb9\x12\x5b\x1e\x86\xb2\x4c\x55\x81\x00\xba\xea\x9a\x7e\xee\x43\xec\xb4\x75\x34\xce\xed\xc1\x98\x61\x74\xec\x67\x00\x00\x00\xff\xff\x49\xce\x44\x05\xe0\x02\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 736, mode: os.FileMode(420), modTime: time.Unix(1566239290, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
