// Code generated by go-bindata.
// sources:
// conf/app.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x50\x5b\x6b\xdb\x30\x18\x7d\xd7\xaf\x38\xcd\x28\xb4\x10\xda\x6c\x63\x2f\x0d\x79\x10\xb6\x92\x98\xd6\x96\x91\xe5\x8e\x52\x4a\x50\xe3\xaf\xb5\xc1\x17\x61\x29\xe9\xfa\xef\x87\x9c\xee\x8a\x40\x88\xef\x5c\x3e\x9d\xf3\x09\x67\x67\x67\xc8\xc4\xbd\x50\x98\xae\x54\xc6\xc9\xfa\x01\x7a\x9b\x14\x58\x27\x77\x22\xe0\xec\xc4\xca\xef\x04\x2f\x04\x52\x7e\x2b\x10\x6d\x79\xb6\x11\x05\x64\x86\x48\x2a\x25\x8a\x5c\x66\x71\x92\x6d\x10\x95\x85\x96\x29\x22\x99\xad\x93\xcd\xff\x0e\xc9\x1a\x0f\xb2\x04\x57\x02\x39\x8f\x6e\xf9\x26\x28\x72\x25\xef\x93\x58\xa8\xf9\x3f\x0b\xe4\xf7\xe0\x9c\x3f\x40\xae\x91\xe8\xc9\x83\x2d\xc1\xad\x45\x6f\x3a\x82\xaf\x8d\x87\xab\x87\x37\x87\xa1\x07\x1d\x69\x7c\x87\x35\xaf\x04\xdf\xf8\x96\x18\xcf\xf3\x5d\xc6\x53\x81\x15\x78\x3f\xf4\xef\xdd\x40\x6c\x09\x5d\xd3\x49\x3d\xbc\xc0\xd7\x04\xf7\xee\x3c\x75\x38\x38\x1a\x4f\x86\xe3\xa1\x77\x7f\x04\xaa\xcc\x76\x65\x21\x14\x56\xe8\x4c\xd3\xd6\x83\xf3\x6c\x09\xd1\xf8\x9a\x46\xcc\x2a\x3a\xce\xe6\x98\xd9\x71\xa8\x66\x18\x46\xcc\x3c\x39\x3f\x9b\x44\xa9\x8c\xc3\xe6\x8a\x8e\x8c\x3d\x3a\x1a\x8f\x34\x3e\xb1\x5c\x49\x2d\x23\x79\x87\x15\x6a\xef\x2d\x8b\x65\xca\x93\x0c\x2b\xb4\xc3\xde\x9c\xcc\x95\x94\x7a\x57\xaa\x40\x39\xbf\xf8\xc5\xbf\x74\x37\xd7\xd7\xe7\x17\x27\xfa\xa5\xbb\x39\xbf\xd8\x6a\x9d\xef\x72\xa9\xf4\xa5\x63\xd3\x9b\xc7\x71\xf8\xe4\xe2\x6a\x3a\xec\x37\x8e\x15\xbe\x2e\x16\x8b\x50\x5c\x69\x2d\x8d\x68\xe9\x48\xed\x94\x9e\x3a\xdb\x1a\x4f\x30\x7d\x05\xe7\x8d\x6f\xf6\x78\x69\x5a\x82\x35\xbe\x66\x4b\x54\xf4\x62\x0e\xad\x47\xe3\xa6\xa2\xc2\x14\x6f\x35\x8d\x04\x63\x6d\xdb\xec\x8d\x6f\x86\x3e\xa0\xf4\x83\xf6\x07\x4f\x15\x2b\x34\xd7\x49\xb4\x9b\x22\xe4\x5c\x6f\xb1\x0a\x6b\x63\xe3\xcd\xb3\x71\x04\x47\xde\x37\xfd\xab\x63\x8f\xd5\xc7\xe8\x89\x9d\x68\x08\x83\x6b\x33\x95\x6e\x9a\xf6\xaa\x7a\x0e\xc2\xd4\x34\xed\x5f\xa2\x80\x3c\xb1\x8f\x4c\x9f\x17\x5f\xbe\xb1\x5c\x25\xf7\x5c\x8b\x1d\x8f\x22\x59\x66\xba\xc0\x0a\xa6\xea\x9a\x7e\x1e\x9a\xec\x8c\xf3\x34\xce\xdd\xc1\xda\x61\xf4\xec\x67\x00\x00\x00\xff\xff\xb9\x94\x78\x55\xe5\x02\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 741, mode: os.FileMode(420), modTime: time.Unix(1566247779, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
