// Code generated by go-bindata.
// sources:
// conf/app.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\x51\x6b\xdb\x30\x14\x46\xdf\xf5\x2b\xbe\x7a\x04\x12\x28\x4b\x60\x6f\x0d\x7e\x10\xb6\x9c\x88\xc6\xba\x42\x96\x3b\xc2\x18\xc1\x2c\xda\x1c\x48\x2c\x63\xa9\x19\xf9\xf7\xc3\x36\xdb\xd8\x10\x08\x84\xce\x39\xf7\x7e\xc0\xd3\xd3\x13\x94\x78\x13\x06\xd3\x55\x52\x2e\x8b\x23\xec\x5e\x56\x28\xe4\x41\x8c\xff\x6c\xa6\xf4\x41\xf0\x4a\xa0\xe4\xaf\x02\xd9\x9e\xab\x9d\xa8\x40\x0a\x19\x19\x23\x2a\x4d\x2a\x97\x6a\x87\xac\xae\x2c\x95\xc8\x48\x15\x72\xf7\x7f\x41\x16\x38\x52\x0d\x6e\x04\x34\xcf\x5e\xf9\x6e\x34\xb4\xa1\x37\x99\x0b\xf3\xfc\xcf\x00\xfa\x3c\x96\xf5\x11\x54\x40\xda\xa9\xc1\xb6\xe0\x7d\x8f\xae\xb9\x39\xc4\xb6\x89\x08\xad\xff\x19\xe0\x3b\xb8\xbb\x1b\x1e\xe8\x9b\x1f\x0e\xf1\x12\xaf\x8e\x71\xad\x4f\x8a\x97\x02\x29\x78\xe7\xbb\xc7\xcd\x3b\xb6\x85\x6d\xdd\x6c\xfb\xef\x88\xad\x43\x78\x84\xe8\x6e\x78\x0f\x6e\x98\x83\xc3\x7b\x17\xfe\x0a\xa6\x56\xa7\xba\x12\x06\x29\x6e\xcd\xe5\xda\xfa\x10\xd9\x16\xe2\x12\x5b\x37\x20\x39\xbb\x7b\xf2\x8c\xa4\x1f\xfc\x39\x81\x1f\x90\x44\x17\x62\x32\x49\x25\xe5\xe3\xe4\xb3\xbb\x33\xf6\x25\xb8\xe1\xee\x86\xaf\x4c\x1b\xb2\x94\xd1\x01\x29\xda\x18\x7b\x96\x53\xc9\xa5\x42\x8a\xab\xff\xd6\xcc\x71\x43\x64\x4f\xb5\x19\x91\xc5\xf2\x37\xbf\x0a\x2f\xeb\xf5\x62\x39\xe3\xab\xf0\xb2\x58\xee\xad\xd5\x27\x4d\xc6\xae\xc2\x9a\x4d\x0f\x9e\xe7\xe3\x96\x9b\x8f\xd3\x61\x7f\x00\xa4\xf8\xb4\xd9\x6c\x7e\x05\x00\x00\xff\xff\x8d\x91\x0a\x20\xe5\x01\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 485, mode: os.FileMode(420), modTime: time.Unix(1564198781, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

