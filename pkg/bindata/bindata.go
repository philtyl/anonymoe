// Code generated by go-bindata.
// sources:
// conf/app.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x61\xab\x9b\x30\x14\x86\xbf\xe7\x57\xbc\x75\x14\x5a\xb8\xac\x85\x7d\xbb\xc5\x0f\x41\xd3\x56\x6e\x35\x12\xe3\x1d\x65\x8c\x12\xea\xe9\x14\xac\x06\x93\xf6\xae\xff\x7e\x68\xd9\xc6\x86\x20\x24\xe7\x79\x9f\x93\x73\x3e\x61\x36\x9b\x21\x13\xef\x42\x61\xfa\xa5\x32\x4e\xb6\x47\xe8\x7d\x52\x60\x9b\x1c\xc4\x58\x67\x4f\x2a\x3f\x08\x5e\x08\xa4\xfc\x4d\x20\xda\xf3\x6c\x27\x0a\xc8\x0c\x91\x54\x4a\x14\xb9\xcc\xe2\x24\xdb\x21\x2a\x0b\x2d\x53\x44\x32\xdb\x26\xbb\xff\x0d\xc9\x16\x47\x59\x82\x2b\x81\x9c\x47\x6f\x7c\x37\x26\x72\x25\xdf\x93\x58\xa8\x97\x7f\x1a\xc8\xaf\xa3\x39\x3f\x42\x6e\x91\xe8\xc9\xc1\x36\xe0\xd6\xa2\x33\x57\x82\xaf\x8d\x87\xab\xfb\x0f\x87\xbe\x03\xdd\x69\x78\xc0\x9a\x1f\x04\xdf\xf8\x96\x18\xcf\xf3\x53\xc6\x53\x81\x10\xbc\xeb\xbb\xc7\xb5\x27\xb6\x81\xae\xe9\x99\xee\x2f\xf0\x35\xc1\x3d\x9c\xa7\x2b\x6e\x8e\x86\xa7\x70\xb8\x75\xee\x6f\x40\x95\xd9\xa9\x2c\x84\x42\x88\xab\x69\xda\xba\x77\x9e\x6d\x20\x1a\x5f\xd3\x80\xa0\xa2\x7b\xf0\x82\xc0\x0e\x7d\x15\xa0\x1f\x10\x78\x72\x3e\x98\x42\xa9\x8c\xc7\xce\x15\xdd\x19\xfb\xe6\x68\xb8\xd3\xf0\x9d\xe5\x4a\x6a\x19\xc9\x03\x42\xd4\xde\x5b\x16\xcb\x94\x27\x19\x42\xb4\xfd\xd9\x3c\xe5\x4a\x4a\x7d\x2a\xd5\x88\xcc\x17\xbf\xf9\xa5\x7b\x5d\xad\xe6\x8b\x27\xbe\x74\xaf\xf3\xc5\x5e\xeb\xfc\x94\x4b\xa5\x97\x6e\xc5\xa6\x03\x8f\xe3\xf1\x95\xeb\xcf\xd3\xc7\xfe\x00\x08\xf1\x65\xbd\x5e\x8f\x9b\x2b\xad\xa5\x01\x2d\xdd\xa9\x9d\xc6\xa7\xab\x6d\x8d\x27\x98\xae\x82\xf3\xc6\x37\x67\x5c\x9a\x96\x60\x8d\xaf\xd9\x06\x15\x5d\xcc\xad\xf5\x68\xdc\xb4\xa9\xf1\x16\x1f\x35\x0d\x04\x63\x6d\xdb\x9c\x8d\x6f\xfa\x6e\xac\xd2\x4f\x3a\xdf\x3c\x55\xac\xd0\x5c\x27\xd1\x69\x9a\x21\xe7\x7a\x8f\xf0\x57\x00\x00\x00\xff\xff\xf1\x95\x7b\x7e\x5c\x02\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 604, mode: os.FileMode(420), modTime: time.Unix(1566016752, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
