// Code generated by go-bindata.
// sources:
// conf/VERSION
// conf/app.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confVersion = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x32\xd0\x33\xd4\x33\x02\x04\x00\x00\xff\xff\x9d\x40\x97\xc1\x05\x00\x00\x00")

func confVersionBytes() ([]byte, error) {
	return bindataRead(
		_confVersion,
		"conf/VERSION",
	)
}

func confVersion() (*asset, error) {
	bytes, err := confVersionBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/VERSION", size: 5, mode: os.FileMode(420), modTime: time.Unix(1566571850, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\x51\x6b\xdb\x30\x1c\xc4\xdf\xf5\x29\x2e\x8c\x40\x02\xa5\xf5\x56\xf6\xd2\xe1\x07\x61\xff\x1d\x9b\xd9\x92\x90\xd5\x42\x29\x21\xa8\x8b\x68\x0c\x8e\xed\x59\x5a\x47\xbf\xfd\x50\xdc\x8e\xc1\x10\xe8\xe1\xfe\x77\x3f\xee\x3e\x61\xb5\x5a\x41\xd0\x03\x69\x5c\xbe\x46\xe6\x55\xf1\x08\x53\x56\x2d\x8a\xaa\xa6\x78\x67\x8b\x4b\xd5\xc4\x5b\x42\xc3\xbf\x13\xb2\x92\x8b\x1d\xb5\x90\x02\x3b\x12\xa4\xb9\xa1\x1c\x99\x14\x45\xb5\x5b\x62\xbc\x30\xa4\x3f\x94\x4a\xb4\x86\xd7\xf5\xff\x2c\x4d\x05\x69\x18\x09\x4d\x3c\x6f\x08\x85\xd4\x28\xa9\x56\x17\x27\xfb\x06\x3e\x4d\x18\xec\xd9\x21\x9c\x6c\x80\x3f\x8d\xbf\x3d\xc6\x01\xee\xd5\xcd\x6f\x98\xec\x8b\x43\xe8\x42\xef\x18\x57\xea\x20\x78\x43\x48\xc1\x87\x71\x78\x3b\x8f\x8e\xb1\x27\xef\xe6\x57\x37\xef\x99\xd2\xd2\xc8\x4c\xd6\x48\x71\x0a\x61\x62\xb9\x6c\x78\x25\x90\xa2\x1f\x7f\xd8\xfe\x34\xfa\xc0\x4a\x63\xd4\x81\xe7\xb9\x46\x8a\xe4\xfa\xf2\x16\x4d\x49\x6d\x90\xe2\x36\x49\x12\xa6\xa5\x34\x87\x7b\x1d\x39\xeb\xcd\x07\x74\xeb\xef\x6e\x6e\xd6\x9b\x85\xb9\xf5\x77\xeb\xcd\xdf\xdc\xd6\xc7\x0d\xb9\x0d\xf6\xd9\x7a\x07\xef\x42\xe8\x86\x17\xcf\x9e\x8e\xef\xd2\x9e\x99\x47\x15\x4b\xfb\x9f\x7d\x17\xdc\x2d\x53\xdc\x94\x48\x61\x2f\x1b\x6c\xd7\x5f\x1f\x9f\x23\xa2\xb1\x5d\xff\x4f\x3c\x5e\xf6\xec\xbd\xd9\xe7\xe4\xcb\x57\xa6\x74\xf5\xc0\x0d\x1d\x78\x96\xc9\x7b\x61\xda\xc8\x38\x9e\xbb\xe1\x2a\x8e\x3b\x5b\x1f\xdc\x7c\xe5\x7f\x4d\xd3\x38\x07\xf6\x27\x00\x00\xff\xff\x73\x57\xc7\xfe\xf3\x01\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 499, mode: os.FileMode(420), modTime: time.Unix(1566404564, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/VERSION": confVersion,
	"conf/app.ini": confAppIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"VERSION": &bintree{confVersion, map[string]*bintree{}},
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
